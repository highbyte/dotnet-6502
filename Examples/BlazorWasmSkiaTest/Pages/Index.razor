@page "/"
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@*@implements IDisposable*@

<PageTitle>Blazor Wasm Skia Test</PageTitle>

@*Inject JS to be able to set focus on SKGLView from code*@
@inject IJSRuntime Js

@*Skia OpenGl View Blazor WASM component*@
<div id="main" @ref="_mainRef">
    <SKGLView class="skGLViewStyle"
              IgnorePixelScaling="true"
              EnableRenderLoop="true"
              OnPaintSurface="OnPaintSurface"
              id="emulatorSKGLView"
              tabindex="0"
              oncontextmenu="return false;"
              @onkeypress="OnKeyPress"
              @onkeydown="OnKeyDown"
              @onkeyup="OnKeyUp" 
              @ref="_emulatorSKGLViewRef"
              autofocus />
</div>

@*Monitor console*@
<div id="monitor" class="monitorStyle">
    <div class="px-4">
        Monitor
    </div>
    <div id="monitor-outer-screen">
        <div id="monitor-inner-screen">
            <div id="monitor-output-outer"><div id="monitor-output">@((MarkupString)_monitorOutput)</div></div>
            <div id="monitor-blank-line">&nbsp;</div>
            <div id="monitor-input-row">
                <span>&gt;&nbsp;</span><input id="monitor-input" @bind="_monitorInput" type="text" @onkeydown="OnKeyDownMonitor" @onkeyup="OnKeyUpMonitor" @ref="_monitorInputRef" />
            </div>
        </div>

        <div id="monitor-status-outer"><div id="monitor-status">@((MarkupString)_monitorStatus)</div></div>
    </div>
@*    <div class="px-4">
        Status
    </div>
    <div id="monitor-status-outer"><div id="monitor-status">@((MarkupString)_monitorStatus)</div></div>*@
</div>

@*Stats/Debug*@
<div id="debug" class="debugStyle">
    <div class="px-4">
        @_statsString
    </div>
    <div class="px-4">
        @_debugString
    </div>
</div>

<style>
    .skGLViewStyle {
        width: @_windowWidthStyle;
        height: @_windowHeightStyle;
    }
    .debugStyle {
        display: @_debugDisplay;
    }
    .monitorStyle {
        display: @_monitorDisplay;
    }


</style>


@code
{
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //await FocusEmulator();
        }
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (_wasmHost == null)
            return;
        _wasmHost.InputHandlerContext.KeyPress(e);

        // Emulator host functions such as monitor and stats/debug
        _wasmHost.OnKeyPress(e);
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (_wasmHost == null)
            return;
        _wasmHost.InputHandlerContext.KeyDown(e);

        // Emulator host functions such as monitor and stats/debug
        _wasmHost.OnKeyDown(e);
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        if (_wasmHost == null)
            return;
        _wasmHost.InputHandlerContext.KeyUp(e);
    }

    //private void OnPointerDown(PointerEventArgs e)
    //{
    //}

    //private void OnPointerMove(PointerEventArgs e)
    //{
    //}

    //private void OnPointerUp(PointerEventArgs e)
    //{
    //}

    //private void OnTouchMove(TouchEventArgs e)
    //{
    //}

    //private void OnMouseWheel(WheelEventArgs e)
    //{
    //}

    private void OnKeyDownMonitor(KeyboardEventArgs e)
    {
        if (_wasmHost == null || _wasmHost.Monitor == null)
            return;
        _wasmHost.Monitor.OnKeyDown(e);
    }

    private void OnKeyUpMonitor(KeyboardEventArgs e)
    {
        if (_wasmHost == null || _wasmHost.Monitor == null)
            return;
        _wasmHost.Monitor.OnKeyUp(e);
    }

    private async Task FocusEmulator()
    {
        await Js.InvokeVoidAsync("focusId", "emulatorSKGLView");
    }

    private async Task FocusMonitor()
    {
        await Task.Run(async () => await _monitorInputRef.FocusAsync());    // Task.Run fix for focusing on a element that is not yet visible (but about to be)
        //await _monitorInputRef.FocusAsync();
    }
}
