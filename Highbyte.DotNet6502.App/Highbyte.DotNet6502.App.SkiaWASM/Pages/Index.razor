@page "/"
@using Highbyte.DotNet6502.App.SkiaWASM.Pages.Commodore64
@using Highbyte.DotNet6502.App.SkiaWASM.Pages.Generic

@using SkiaSharp.Views.Blazor
@*@implements IDisposable*@

@*Note: Page title set in index.html title element*@
@*<PageTitle>dotnet-6502 CPU emulator in Blazor WebAssembly with Skia rendering</PageTitle>
*@

@*Inject JS to be able to set focus on SKGLView from code*@
@inject IJSRuntime Js

@*Inject Local Storage helper services *@
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

<div class="grid-container">
    <div class="header">
        <a href="https://github.com/highbyte/dotnet-6502" target="_blank">DotNet 6502</a>
    </div>
    <div class="menu">
        <div id="system-selector">
            <div>
                System:
                @* <select @bind="@SelectedSystemName" disabled=@OnSelectSystemNameDisabled autofocus> *@
                <select value="@SelectedSystemName" @onchange="OnSelectedEmulatorChanged" disabled=@OnSelectSystemNameDisabled autofocus>
                    @foreach (var systemName in _systemList.Systems)
                    {
                        <option value="@systemName"> @systemName </option>
                    }
                </select>
            </div>
            <div>Status: @(
                _emulatorState
                )</div>
            <button @onclick="OnStart" disabled=@OnStartDisabled>Start</button>
            <button @onclick="OnPause" disabled=@OnPauseDisabled>Pause</button>
            <button @onclick="OnReset" disabled=@OnResetDisabled>Reset</button>
            <button @onclick="OnStop" disabled=@OnStopDisabled>Stop</button>
            <button @onclick="OnMonitorToggle" disabled=@OnStopDisabled>Monitor</button>
            <button @onclick="OnStatsToggle" disabled=@OnStopDisabled>Stats</button>

            <p></p>
            <span>Screen scale: <InputNumber @bind-Value="Scale" step="0.5" style="width: 40px" disabled=@OnSelectSystemNameDisabled>Scale: </InputNumber></span>

            <p></p>
            <label for="audioEnabled">Audio enabled (experimental)</label>
            <input id="audioEnabled" type="checkbox" @bind="@AudioEnabled" disabled=@AudioEnabledToggleDisabled />

            <p></p>
            <div class="audioVolumeStyle">
                Volume:
                <input @bind="@MasterVolumePercent" @bind:event="oninput" type="range" id="masterVolume" min="0" max="100" step="0.02" />
                @* <input @bind="@MasterVolumePercent" @bind:event="oninput" type="number" min="0" max="100" step="0.02" /> *@
            </div>
        </div>

        <div class="system-help" style="display:inline;">
            <h4>About the emulator</h4>
            <button @onclick="ShowGeneralHelpUI">Help</button>
        </div>

        <h4>Selected system: @SelectedSystemName</h4>

        <C64Menu Parent=this />
        <GenericMenu Parent=this />

        <div class="validation-message">
            <span>@GetSelectedSystemConfigValidationMessage()</span>
        </div>

    </div>

    <div class="menuFooter">
        <div id="versionInfo">
            <p>
                <a href="https://github.com/highbyte/dotnet-6502" target="_blank">dotnet-6502</a>
            </p>
            <p>
                By: <a href="https://github.com/highbyte" target="_blank">Highbyte</a>
            </p>
            <p>
                Version: @Version
            </p>
        </div>
    </div>

    @*Skia OpenGl View Blazor WASM component*@
    <div class="main">
        <SKGLView class="skGLViewStyle"
        IgnorePixelScaling="true"
        EnableRenderLoop="true"
        OnPaintSurface="OnPaintSurface"
        id="emulatorSKGLView"
        tabindex="0"
        oncontextmenu="return false;"
        @onkeypress="OnKeyPress"
        @onkeydown="OnKeyDown"
        @onkeyup="OnKeyUp"
        @ref="_emulatorSKGLViewRef"
        />

        <div id="canvasUninitialized"
        class="canvasUninitializedStyle">

            <h2>
                The DotNet 6502 emulator!
            </h2>

            <p>
                A <a href="https://en.wikipedia.org/wiki/MOS_Technology_6502" target="_blank">6502 CPU</a> emulator written in <a href="https://dotnet.microsoft.com/" target="_blank">.NET</a>, rendered with <a href="https://github.com/mono/SkiaSharp" target="_blank">SkiaSharp</a>, compiled to <a href="https://en.wikipedia.org/wiki/WebAssembly" target="_blank">WebAssembly</a> via <a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor" target="_blank">Blazor</a>, running in a browser.
            </p>
            <p>
                Select the computer to emulate in the System drop down menu on the left.
            </p>
            <p>
                For certain computers (like the C64) you have to provide ROM files via a Config button.
            </p>
            <p>
                Press Start button to run.
            </p>
            <p>
                When running, press F12 to start machine code monitor and F11 to show statistics.
            </p>
        </div>

    </div>
    <div class="right">
        <div class="infobox debugStyle">
            <div class="infobox-output">@(
                (MarkupString)_statsString
                )</div>
        </div>
        <div class="infobox debugStyle">
            <div class="infobox-output">@(
                (MarkupString)_debugString
                )</div>
        </div>

        <div class="monitorStyle">
            <div id="monitor-outer-screen">
                <div id="monitor-inner-screen">
                    <div id="monitor-output-outer"><div id="monitor-output">@(
                            (MarkupString)_monitorOutput
                            )</div></div>
                    <div id="monitor-blank-line">&nbsp;</div>
                    <div id="monitor-input-row">
                        <span>&gt;&nbsp;</span><input id="monitor-input" @bind="_monitorInput" type="text" @onkeydown="OnKeyDownMonitor" @onkeyup="OnKeyUpMonitor" @ref="_monitorInputRef" />
                    </div>
                </div>
            </div>

            @*Monitor status*@
            <div class="infobox">
                <div class="infobox-output">@(
                    (MarkupString)_monitorStatus
                    )</div>
            </div>
        </div>
    </div>

    <div class="footer">
        <C64MenuHelp Parent=this />
        <GenericMenuHelp Parent=this />
    </div>
</div>

<style>
    .skGLViewStyle {
    display: @GetDisplayStyle("Canvas");
    width: @_windowWidthStyle;
    height: @_windowHeightStyle;
    }

    .canvasUninitializedStyle {
    display: @GetDisplayStyle("CanvasUninitialized");
    width: 806px;
    height: 320px;
    }

    .debugStyle {
    display: @GetDisplayStyle("Debug");
    }
    .monitorStyle {
    display: @GetDisplayStyle("Monitor");
    }
    .audioVolumeStyle {
    display: @GetDisplayStyle("AudioVolume");
    }
</style>

<InputFile id="monitorFilePicker" OnChange="@OnMonitorFilePickerChange" hidden/>

@code
{
    protected string GetDisplayStyle(string displayData)
    {
        const string VISIBLE = "inline";
        const string VISIBLE_BLOCK = "inline-block";
        const string HIDDEN = "none";

        switch (displayData)
        {
            case "Canvas":
                {
                    return _emulatorState != EmulatorState.Uninitialized ? VISIBLE : HIDDEN;
                }
            case "CanvasUninitialized":
                {
                    return _emulatorState == EmulatorState.Uninitialized ? VISIBLE_BLOCK : HIDDEN;
                }
            case "Debug":
                {
                    return _debugVisible ? VISIBLE : HIDDEN;
                }
            case "Monitor":
                {
                    return _monitorVisible ? VISIBLE : HIDDEN;
                }
            case "AudioVolume":
                {
                    return (_currentConfig?.AudioEnabled ?? false) ? VISIBLE : HIDDEN;
                }
            default:
                return VISIBLE;
        }
    }

    public string GetSystemVisibilityDisplayStyle(string displayData, string systemName)
    {
        const string VISIBLE = "inline";
        const string VISIBLE_BLOCK = "inline-block";
        const string HIDDEN = "none";

        switch (displayData)
        {
            case "Commands":
                {
                    return SelectedSystemName == systemName ? VISIBLE : HIDDEN;
                }
            case "Help":
                {
                    return SelectedSystemName == systemName ? VISIBLE : HIDDEN;
                }
            case "Config":
                {
                    return SelectedSystemName == systemName ? VISIBLE : HIDDEN;
                }
            default:
                return VISIBLE;
        }
    }

    protected bool OnSelectSystemNameDisabled => _emulatorState == EmulatorState.Running || _emulatorState == EmulatorState.Paused;
    protected bool OnStartDisabled => _emulatorState == EmulatorState.Running || !IsSelectedSystemConfigOk;
    protected bool OnPauseDisabled => _emulatorState == EmulatorState.Paused || _emulatorState == EmulatorState.Uninitialized;
    protected bool OnResetDisabled => _emulatorState == EmulatorState.Uninitialized;
    protected bool OnStopDisabled => _emulatorState == EmulatorState.Uninitialized;

    public async Task OnStart(MouseEventArgs mouseEventArgs)
    {
        if (_emulatorState == EmulatorState.Uninitialized)
        {
            bool isOk = await _systemList.IsValidConfig(_selectedSystemName);
            if (!isOk)
                return;

            await InitEmulator();
        }

        _wasmHost!.Start();
        _emulatorState = EmulatorState.Running;
        await FocusEmulator();

        this.StateHasChanged();
    }
    public async Task OnPause(MouseEventArgs mouseEventArgs)
    {
        if (_emulatorState == EmulatorState.Uninitialized)
            return;

        _wasmHost!.Stop();
        _emulatorState = EmulatorState.Paused;
        this.StateHasChanged();
    }
    public async Task OnReset(MouseEventArgs mouseEventArgs)
    {
        await OnPause(mouseEventArgs);
        await OnStop(mouseEventArgs);
        await OnStart(mouseEventArgs);
    }
    public async Task OnStop(MouseEventArgs mouseEventArgs)
    {
        await CleanupEmulator();
        this.StateHasChanged();
    }
    protected async Task OnMonitorToggle(MouseEventArgs mouseEventArgs)
    {
        await _wasmHost!.ToggleMonitor();
        this.StateHasChanged();
    }

    protected async Task OnStatsToggle(MouseEventArgs mouseEventArgs)
    {
        await ToggleDebugStatsState();
    }


    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (_wasmHost == null)
            return;
        _wasmHost.InputHandlerContext.KeyPress(e);

        // Emulator host functions such as monitor and stats/debug
        _wasmHost.OnKeyPress(e);
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (_wasmHost == null)
            return;
        _wasmHost.InputHandlerContext.KeyDown(e);

        // Emulator host functions such as monitor and stats/debug
        _wasmHost.OnKeyDown(e);
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        if (_wasmHost == null)
            return;
        _wasmHost.InputHandlerContext.KeyUp(e);
    }

    //private void OnPointerDown(PointerEventArgs e)
    //{
    //}

    //private void OnPointerMove(PointerEventArgs e)
    //{
    //}

    //private void OnPointerUp(PointerEventArgs e)
    //{
    //}

    //private void OnTouchMove(TouchEventArgs e)
    //{
    //}

    //private void OnMouseWheel(WheelEventArgs e)
    //{
    //}

    private void OnKeyDownMonitor(KeyboardEventArgs e)
    {
        if (_wasmHost == null || _wasmHost.Monitor == null)
            return;
        _wasmHost.Monitor.OnKeyDown(e);
    }

    private void OnKeyUpMonitor(KeyboardEventArgs e)
    {
        if (_wasmHost == null || _wasmHost.Monitor == null)
            return;
        _wasmHost.Monitor.OnKeyUp(e);
    }

    private async Task FocusEmulator()
    {
        await Js.InvokeVoidAsync("focusId", "emulatorSKGLView", 100);  // Hack: Delay of x ms for focus to work.
    }

    private async Task FocusMonitor()
    {
        await Task.Run(async () => await _monitorInputRef!.Value.FocusAsync());    // Task.Run fix for focusing on a element that is not yet visible (but about to be)
                                                                                   //await _monitorInputRef.FocusAsync();
    }

    /// <summary>
    /// Callback from monitor when user has selected a file to load
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnMonitorFilePickerChange(InputFileChangeEventArgs e)
    {
        if (_wasmHost == null || _wasmHost.Monitor == null)
            return;

        // Only expect one file
        if (e.FileCount > 1)
            return;
        var file = e.File;
        System.Diagnostics.Debug.WriteLine($"File picked: {file.Name} Size: {file.Size}");

        var fileBuffer = new byte[file.Size];
        //var fileStream = e.File.OpenReadStream(file.Size);
        await file.OpenReadStream().ReadAsync(fileBuffer);
        var fileSize = fileBuffer.Length;

        _wasmHost.Monitor.LoadBinaryFromUser(fileBuffer);
    }
}