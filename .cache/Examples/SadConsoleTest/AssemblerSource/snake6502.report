
; ******** Source: c:\Users\highb\Source\Repos\dotnet-6502\Examples\SadConsoleTest\AssemblerSource\snake6502.asm
     1                          ; Modified version of the Snake game from http://skilldrick.github.io/easy6502/#snake
     2                          ; to be able to 
     3                          ; - Compile with ACME assembler
     4                          ; - Run in the DotNet6502 emulator.
     5                          
     6                          * = $c000
     7                          blankCharachter = 32  ; 32 = C64 font space
     8                          snakeCharacter = 160  ; 160 = C64 font inverted space
     9                          appleCharacter = 64   ; 64 = C64 font  @ sign
    10                          screenMem = 0x0200    ; Start address of screen memory
    11                          screenCols = 32       ; Note: Cannot change cols without modifying code
    12                          screenRows = 32       ; Note: Cannot change rows without modifying code
    13                          
    14                          ;Byte with status flags to communicate with emulator host. When host new frame, emulator done for frame, etc.
    15                          SCREEN_REFRESH_STATUS = 0xd000
    16                          
    17                          
    18                          ;  ___           _        __ ___  __ ___
    19                          ; / __|_ _  __ _| |_____ / /| __|/  \_  )
    20                          ; \__ \ ' \/ _` | / / -_) _ \__ \ () / /
    21                          ; |___/_||_\__,_|_\_\___\___/___/\__/___|
    22                          
    23                          ; Change direction: W A S D
    24                          
    25                          appleL         = $00 ; screen location of apple, low byte
    26                          appleH         = $01 ; screen location of apple, high byte
    27                          snakeHeadL     = $10 ; screen location of snake head, low byte
    28                          snakeHeadH     = $11 ; screen location of snake head, high byte
    29                          snakeBodyStart = $12 ; start of snake body byte pairs
    30                          snakeDirection = $02 ; direction (possible values are below)
    31                          snakeLength    = $03 ; snake length, in bytes
    32                          
    33                          ; Directions (each using a separate bit)
    34                          movingUp      = 1
    35                          movingRight   = 2
    36                          movingDown    = 4
    37                          movingLeft    = 8
    38                          
    39                          ; ASCII values of keys controlling the snake
    40                          ASCII_w      = $77
    41                          ASCII_a      = $61
    42                          ASCII_s      = $73
    43                          ASCII_d      = $64
    44                          
    45                          ; System variables
    46                          sysRandom    = 0xd41b
    47                          sysLastKey   = 0xd031
    48                          
    49                          Start:
    50  c000 2006c0               jsr init
    51  c003 203dc0               jsr loop
    52                          
    53                          init:
    54  c006 2045c1               jsr ClearScreen
    55  c009 2010c0               jsr initSnake
    56  c00c 202dc0               jsr generateApplePosition
    57  c00f 60                   rts
    58                          
    59                          
    60                          initSnake:
    61  c010 a902                 lda #movingRight  ;start direction
    62  c012 8502                 sta snakeDirection
    63                          
    64  c014 a904                 lda #4  ;start length (2 segments)
    65  c016 8503                 sta snakeLength
    66                            
    67  c018 a911                 lda #$11
    68  c01a 8510                 sta snakeHeadL
    69                            
    70  c01c a910                 lda #$10
    71  c01e 8512                 sta snakeBodyStart
    72                            
    73  c020 a90f                 lda #$0f
    74  c022 8514                 sta $14 ; body segment 1
    75                            
    76  c024 a904                 lda #$04
    77  c026 8511                 sta snakeHeadH
    78  c028 8513                 sta $13 ; body segment 1
    79  c02a 8515                 sta $15 ; body segment 2
    80  c02c 60                   rts
    81                          
    82                          
    83                          generateApplePosition:
    84                            ;load a new random byte into $00
    85  c02d ad1bd4               lda sysRandom
    86  c030 8500                 sta appleL
    87                          
    88                            ;load a new random number from 2 to 5 into $01
    89  c032 ad1bd4               lda sysRandom
    90  c035 2903                 and #$03 ;mask out lowest 2 bits
    91  c037 18                   clc
    92                            ;adc #2    ;Highbyte of video memory start address (2 = 0x0200)
    93  c038 6902                 adc #>screenMem    ;Highbyte of video memory start address (2 = 0x0200)
    94  c03a 8501                 sta appleH
    95                          
    96  c03c 60                   rts
    97                          
    98                          
    99                          loop:
   100                          ;Wait for new frame (flag set by emulator host)
   101  c03d 20b5c1             	jsr waitforrefresh
   102                          
   103  c040 205ac0               jsr readKeys
   104  c043 209bc0               jsr checkCollision
   105  c046 20d1c0               jsr updateSnake
   106  c049 2027c1               jsr drawApple
   107  c04c 202ec1               jsr drawSnake
   108                          
   109  c04f a205                 ldx #5 ;wait for x frames
   110  c051 203bc1               jsr spinWheels
   111                          
   112                            ;We're done for this frame (emulator host checks this flag if it should continue with rendering the result from memory)
   113  c054 20bdc1             	jsr markdoneflag
   114                          
   115  c057 4c3dc0               jmp loop
   116                          
   117                          
   118                          readKeys:
   119  c05a ad31d0               lda sysLastKey
   120  c05d c977                 cmp #ASCII_w
   121  c05f f00d                 beq upKey
   122  c061 c964                 cmp #ASCII_d
   123  c063 f014                 beq rightKey
   124  c065 c973                 cmp #ASCII_s
   125  c067 f01b                 beq downKey
   126  c069 c961                 cmp #ASCII_a
   127  c06b f022                 beq leftKey
   128  c06d 60                   rts
   129                          upKey:
   130  c06e a904                 lda #movingDown
   131  c070 2402                 bit snakeDirection
   132  c072 d026                 bne illegalMove
   133                          
   134  c074 a901                 lda #movingUp
   135  c076 8502                 sta snakeDirection
   136  c078 60                   rts
   137                          rightKey:
   138  c079 a908                 lda #movingLeft
   139  c07b 2402                 bit snakeDirection
   140  c07d d01b                 bne illegalMove
   141                          
   142  c07f a902                 lda #movingRight
   143  c081 8502                 sta snakeDirection
   144  c083 60                   rts
   145                          downKey:
   146  c084 a901                 lda #movingUp
   147  c086 2402                 bit snakeDirection
   148  c088 d010                 bne illegalMove
   149                          
   150  c08a a904                 lda #movingDown
   151  c08c 8502                 sta snakeDirection
   152  c08e 60                   rts
   153                          leftKey:
   154  c08f a902                 lda #movingRight
   155  c091 2402                 bit snakeDirection
   156  c093 d005                 bne illegalMove
   157                          
   158  c095 a908                 lda #movingLeft
   159  c097 8502                 sta snakeDirection
   160  c099 60                   rts
   161                          illegalMove:
   162  c09a 60                   rts
   163                          
   164                          
   165                          checkCollision:
   166  c09b 20a2c0               jsr checkAppleCollision
   167  c09e 20b6c0               jsr checkSnakeCollision
   168  c0a1 60                   rts
   169                          
   170                          
   171                          checkAppleCollision:
   172  c0a2 a500                 lda appleL
   173  c0a4 c510                 cmp snakeHeadL
   174  c0a6 d00d                 bne doneCheckingAppleCollision
   175  c0a8 a501                 lda appleH
   176  c0aa c511                 cmp snakeHeadH
   177  c0ac d007                 bne doneCheckingAppleCollision
   178                          
   179                            ;eat apple
   180  c0ae e603                 inc snakeLength
   181  c0b0 e603                 inc snakeLength ;increase length
   182  c0b2 202dc0               jsr generateApplePosition
   183                          doneCheckingAppleCollision:
   184  c0b5 60                   rts
   185                          
   186                          
   187                          checkSnakeCollision:
   188  c0b6 a202                 ldx #2 ;start with second segment
   189                          snakeCollisionLoop:
   190  c0b8 b510                 lda snakeHeadL,x
   191  c0ba c510                 cmp snakeHeadL
   192  c0bc d006                 bne continueCollisionLoop
   193                          
   194                          maybeCollided:
   195  c0be b511                 lda snakeHeadH,x
   196  c0c0 c511                 cmp snakeHeadH
   197  c0c2 f009                 beq didCollide
   198                          
   199                          continueCollisionLoop:
   200  c0c4 e8                   inx
   201  c0c5 e8                   inx
   202  c0c6 e403                 cpx snakeLength          ;got to last section with no collision
   203  c0c8 f006                 beq didntCollide
   204  c0ca 4cb8c0               jmp snakeCollisionLoop
   205                          
   206                          didCollide:
   207  c0cd 4cadc1               jmp gameOver
   208                          didntCollide:
   209  c0d0 60                   rts
   210                          
   211                          
   212                          updateSnake:
   213  c0d1 a603                 ldx snakeLength
   214  c0d3 ca                   dex
   215  c0d4 8a                   txa
   216                          updateloop:
   217  c0d5 b510                 lda snakeHeadL,x
   218  c0d7 9512                 sta snakeBodyStart,x
   219  c0d9 ca                   dex
   220  c0da 10f9                 bpl updateloop
   221                          
   222  c0dc a502                 lda snakeDirection
   223  c0de 4a                   lsr
   224  c0df b009                 bcs up
   225  c0e1 4a                   lsr
   226  c0e2 b019                 bcs right
   227  c0e4 4a                   lsr
   228  c0e5 b01f                 bcs down
   229  c0e7 4a                   lsr
   230  c0e8 b02f                 bcs left
   231                          up:
   232  c0ea a510                 lda snakeHeadL
   233  c0ec 38                   sec
   234  c0ed e920                 sbc #screenCols ;#$20
   235  c0ef 8510                 sta snakeHeadL
   236  c0f1 9001                 bcc upup
   237  c0f3 60                   rts
   238                          upup:
   239  c0f4 c611                 dec snakeHeadH
   240                            ;lda #$1   ; Highbyte of screen memory when we reached top (1 = highbyte of 0x01?? = (screen start x0200 - x rows/cols) 
   241  c0f6 a901                 lda #>(screenMem-1)
   242  c0f8 c511                 cmp snakeHeadH
   243  c0fa f028                 beq collision
   244  c0fc 60                   rts
   245                          right:
   246  c0fd e610                 inc snakeHeadL
   247  c0ff a91f                 lda #(screenCols-1)  ;#$1f
   248  c101 2410                 bit snakeHeadL
   249  c103 f01f                 beq collision
   250  c105 60                   rts
   251                          down:
   252  c106 a510                 lda snakeHeadL
   253  c108 18                   clc
   254  c109 6920                 adc #screenCols ;#$20
   255  c10b 8510                 sta snakeHeadL
   256  c10d b001                 bcs downdown
   257  c10f 60                   rts
   258                          downdown:
   259  c110 e611                 inc snakeHeadH
   260                            ;lda #$6       ; Highbyte of screen memory when we reached end (6 = highbyte of 0x0600 = (screen start x0200 + screen size COLS*ROWS 0x0400)) 
   261  c112 a906                 lda #>(screenMem + (screenRows * screenCols))
   262  c114 c511                 cmp snakeHeadH
   263  c116 f00c                 beq collision
   264  c118 60                   rts
   265                          left:
   266  c119 c610                 dec snakeHeadL
   267  c11b a510                 lda snakeHeadL
   268  c11d 291f                 and #(screenRows-1) ;#$1f
   269  c11f c91f                 cmp #(screenRows-1) ;#$1f
   270  c121 f001                 beq collision
   271  c123 60                   rts
   272                          collision:
   273  c124 4cadc1               jmp gameOver
   274                          
   275                          
   276                          drawApple:
   277  c127 a000                 ldy #0
   278  c129 a940                 lda #appleCharacter
   279  c12b 9100                 sta (appleL),y
   280  c12d 60                   rts
   281                          
   282                          
   283                          drawSnake:
   284  c12e a603                 ldx snakeLength
   285                            ;lda #0
   286  c130 a920                 lda #blankCharachter
   287  c132 8110                 sta (snakeHeadL,x) ; erase end of tail
   288                          
   289  c134 a200                 ldx #0
   290                            ;lda #1
   291  c136 a9a0                 lda #snakeCharacter
   292  c138 8110                 sta (snakeHeadL,x) ; paint head
   293  c13a 60                   rts
   294                          
   295                          spinWheels:
   296                          spinloop:
   297  c13b 20b5c1               jsr waitforrefresh
   298  c13e 20bdc1               jsr markdoneflag
   299  c141 ca                   dex
   300  c142 d0f7                 bne spinloop
   301  c144 60                   rts
   302                          
   303                          ClearScreen:
   304  c145 a920               	lda #blankCharachter
   305  c147 a220                 ldx #screenCols ;Width
   306                          .clrScrLoop:
   307  c149 ca                 	dex
   308  c14a 9d0002             	sta screenMem,x
   309  c14d 9d2002             	sta screenMem + $0020,x
   310  c150 9d4002             	sta screenMem + $0040,x
   311  c153 9d6002             	sta screenMem + $0060,x
   312  c156 9d8002             	sta screenMem + $0080,x
   313  c159 9da002             	sta screenMem + $00a0,x
   314  c15c 9dc002             	sta screenMem + $00c0,x
   315  c15f 9de002             	sta screenMem + $00e0,x
   316  c162 9d0003             	sta screenMem + $0100,x
   317  c165 9d2003             	sta screenMem + $0120,x
   318  c168 9d4003             	sta screenMem + $0140,x
   319  c16b 9d6003             	sta screenMem + $0160,x
   320  c16e 9d8003             	sta screenMem + $0180,x
   321  c171 9da003             	sta screenMem + $01a0,x
   322  c174 9dc003             	sta screenMem + $01c0,x
   323  c177 9de003             	sta screenMem + $01e0,x
   324  c17a 9d0004             	sta screenMem + $0200,x
   325  c17d 9d2004             	sta screenMem + $0220,x
   326  c180 9d4004             	sta screenMem + $0240,x
   327  c183 9d6004             	sta screenMem + $0260,x
   328  c186 9d8004             	sta screenMem + $0280,x
   329  c189 9da004             	sta screenMem + $02a0,x
   330  c18c 9dc004             	sta screenMem + $02c0,x
   331  c18f 9de004             	sta screenMem + $02e0,x
   332  c192 9d0005             	sta screenMem + $0300,x
   333  c195 9d2005             	sta screenMem + $0320,x
   334  c198 9d4005             	sta screenMem + $0340,x
   335  c19b 9d6005             	sta screenMem + $0360,x
   336  c19e 9d8005             	sta screenMem + $0380,x
   337  c1a1 9da005             	sta screenMem + $03a0,x
   338  c1a4 9dc005             	sta screenMem + $03c0,x
   339  c1a7 9de005             	sta screenMem + $03e0,x
   340  c1aa d09d               	bne .clrScrLoop
   341                          
   342  c1ac 60                 	rts
   343                          
   344                          gameOver:
   345                            ;brk
   346  c1ad a278                 ldx #120 ;wait for x frames
   347  c1af 203bc1               jsr spinWheels
   348  c1b2 4c00c0               jmp Start
   349                          
   350                          ;-----------------
   351                          
   352                          !zone waitforrefresh
   353                          waitforrefresh:
   354                          .loop
   355  c1b5 ad00d0             	lda SCREEN_REFRESH_STATUS
   356                          	;tax ; Store copy of current screen status in X
   357  c1b8 2901               	and #%00000001	;Bit 0 set signals it time to refresh screen
   358  c1ba f0f9               	beq .loop	;Loop if bit 1 is not set (AND results in 0, then zero flag set, BEQ branches zero flag is set)
   359                          	; txa ;Transfer original screen status back to A
   360                          	; and %11111110 ;Clear bit 1. TODO: Clearing the flag in memory should probably be done by the host instead?
   361                          	; sta SCREEN_REFRESH_STATUS ;Update status to memory
   362  c1bc 60                 	rts
   363                          ;-----------------	
   364                          
   365                          !zone markdoneflag
   366                          markdoneflag:
   367  c1bd ad00d0             	lda SCREEN_REFRESH_STATUS
   368  c1c0 0902               	ora #%00000010	;Bit 1 set signals that emulator is currently done
   369  c1c2 8d00d0             	sta SCREEN_REFRESH_STATUS ;Update status to memory
   370  c1c5 60                 	rts
