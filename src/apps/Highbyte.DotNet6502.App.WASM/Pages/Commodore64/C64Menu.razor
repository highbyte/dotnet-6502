@using Highbyte.DotNet6502.App.WASM.Skia;
@using Highbyte.DotNet6502.Systems.Commodore64.Config;
@using Highbyte.DotNet6502.Systems.Commodore64;
@using Highbyte.DotNet6502.Systems.Commodore64.Video;
@using static Highbyte.DotNet6502.App.WASM.Pages.Index;

<div class="system-command systemCommandsStyle">


    <label for="Joystick">Joystick</label>
    <select value="@_c64HostConfig.InputConfig.CurrentJoystick" @onchange="OnSelectJoystickChanged">
        @foreach (var joystick in _c64HostConfig.InputConfig.AvailableJoysticks.ToArray())
        {
            <option value="@joystick"> @joystick </option>
        }
    </select>
    <p></p>
    <label for="JoystickKeyboardEnabled">Joystick Keyboard</label>
    <input id="JoystickKeyboardEnabled" type="checkbox" @bind="@JoystickKeyboardEnabled" />
    <select value="@KeyboardJoystick" @onchange="OnSelectKeyboardJoystickChanged" disabled=@SelectKeyboardJoystickDisabled>
        @foreach (var joystick in _c64HostConfig.InputConfig.AvailableJoysticks.ToArray())
        {
            <option value="@joystick"> @joystick </option>
        }
    </select>

    <p>Load/save files</p>
    <button @onclick="OnBasicFilePicker" disabled=@OnBasicFilePickerDisabled>Load Basic .prg</button>
    <button @onclick="OnSaveBasicFile" disabled=@OnBasicFilePickerDisabled>Save Basic .prg</button>
    <button @onclick="OnFilePicker" disabled=@OnFilePickerDisabled>Load & start binary .prg</button>

    <p>Assembly example files</p>
    <div>
        <select value="@SelectedAssemblyExample" @onchange="OnAssemblyExampleChanged" disabled=@OnFilePickerDisabled>
            @foreach (var exampleFileKey in _assemblyExampleFiles.Keys)
            {
                <option value="@_assemblyExampleFiles[exampleFileKey]"> @exampleFileKey </option>
            }
        </select>
        <button @onclick="OnLoadAssemblyExample" disabled=@OnFilePickerDisabled>Load & start</button>
    </div>

    <p>Basic example files</p>
    <div>
        <select value="@SelectedBasicExample" @onchange="OnBasicExampleChanged" disabled=@OnFilePickerDisabled>
            @foreach (var exampleFileKey in _basicExampleFiles.Keys)
            {
                <option value="@_basicExampleFiles[exampleFileKey]"> @exampleFileKey </option>
            }
        </select>
        <button @onclick="OnLoadBasicExample" disabled=@OnFilePickerDisabled>Load</button>
    </div>
</div>

<div class="validation-message">
    <span>@_latestFileError</span>
</div>


<div class="system-help systemHelpStyle">
</div>

<div class="system-config systemConfigStyle">
    <button @onclick="ShowConfigUI" disabled=@ShowConfigDisabled>C64 Config</button>
</div>

<style>
    .systemCommandsStyle {
        display: @Parent.GetSystemVisibilityDisplayStyle("Commands", SYSTEM_NAME);
    }
    .systemHelpStyle {
        display: @Parent.GetSystemVisibilityDisplayStyle("Help", SYSTEM_NAME);
    }
    .systemConfigStyle {
        display: @Parent.GetSystemVisibilityDisplayStyle("Config", SYSTEM_NAME);
    }
</style>

<InputFile id="filePicker" OnChange="@OnFilePickerChange" hidden />
<InputFile id="filePickerBasic" OnChange="@OnBasicFilePickerChange" hidden />

@code {
    @inject IJSRuntime Js
    @inject HttpClient? HttpClient
    @inject ILoggerFactory LoggerFactory

    private ILogger _logger;
    private string _latestFileError = "";
    private string SYSTEM_NAME = C64.SystemName;

    // Note: The current config object (reference) is stored in this variable so that the UI can bind it's properties (not possible to use async call to _systemList.GetSystemConfig() in property )
    private C64Config? _c64Config => Parent.SystemConfig as C64Config;
    private C64HostConfig? _c64HostConfig => Parent.HostSystemConfig as C64HostConfig;

    protected override async Task OnInitializedAsync()
    {
        _logger = LoggerFactory.CreateLogger<C64Menu>();
        _logger.LogDebug("OnInitializedAsync() was called");
    }

    private bool JoystickKeyboardEnabled
    {
        get
        {
            if (_c64Config == null)
                return false;
            return _c64Config?.KeyboardJoystickEnabled ?? false;
        }
        set
        {
            if (_c64Config == null)
                return;
            _c64Config.KeyboardJoystickEnabled = value;
            if (Parent.CurrentEmulatorState != EmulatorState.Uninitialized)
            {
                C64 c64 = (C64)Parent.WasmHost.SystemList.GetSystem(SYSTEM_NAME).Result;
                c64.Cia.Joystick.KeyboardJoystickEnabled = value;
            }
        }
    }

    private async Task OnSelectJoystickChanged(ChangeEventArgs e)
    => _c64HostConfig.InputConfig.CurrentJoystick = int.Parse(e.Value.ToString());

    private async Task OnSelectKeyboardJoystickChanged(ChangeEventArgs e)
        => KeyboardJoystick = int.Parse(e.Value.ToString());

    private bool SelectKeyboardJoystickDisabled => !JoystickKeyboardEnabled;

    private int KeyboardJoystick
    {
        get
        {
            if (_c64Config == null)
                return 0;
            return _c64Config?.KeyboardJoystick ?? 0;
        }
        set
        {
            if (_c64Config == null)
                return;
            _c64Config.KeyboardJoystick = value;
            if (Parent.CurrentEmulatorState != EmulatorState.Uninitialized)
            {
                C64 c64 = (C64)Parent.WasmHost.SystemList.GetSystem(SYSTEM_NAME).Result;
                c64.Cia.Joystick.KeyboardJoystick = value;
            }
        }
    }


    private readonly Dictionary<string, string> _assemblyExampleFiles = new()
    {
        {"","" },
        {"SmoothScroller", "6502binaries/C64/Assembler/smooth_scroller_and_raster.prg" },
        {"Scroller", "6502binaries/C64/Assembler/scroller_and_raster.prg" }
    };
    private readonly Dictionary<string, string> _basicExampleFiles = new()
    {
        {"","" },
        {"HelloWorld", "6502binaries/C64/Basic/HelloWorld.prg" },
        {"PlaySound", "6502binaries/C64/Basic/PlaySoundVoice1TriangleScale.prg" }
    };

    public string SelectedAssemblyExample { get; set; }

    public string SelectedBasicExample { get; set; }

    private bool _wasRunningBeforeFileDialog = false;

    private async Task ShowConfigUI() => await Parent.ShowConfigUI<C64ConfigUI>();


    [Parameter]
    public Highbyte.DotNet6502.App.WASM.Pages.Index Parent { get; set; } = default!;

    protected bool ShowConfigDisabled => Parent.CurrentEmulatorState != EmulatorState.Uninitialized;

    protected bool OnFilePickerDisabled => Parent.CurrentEmulatorState == EmulatorState.Uninitialized;

    protected bool OnBasicFilePickerDisabled => Parent.CurrentEmulatorState == EmulatorState.Uninitialized;

    /// <summary>
    /// Open Load binary file dialog
    /// </summary>
    /// <returns></returns>
    private async Task OnFilePicker(MouseEventArgs mouseEventArgs)
    {
        await Js.InvokeVoidAsync("clickId", "filePicker");
    }

    /// <summary>
    /// Callback when binary file has been loaded from file pick dialog
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnFilePickerChange(InputFileChangeEventArgs e)
    {
        if (Parent.WasmHost == null)
            return;

        if (Parent.CurrentEmulatorState == EmulatorState.Uninitialized)
            return;

        // Only expect one file
        if (e.FileCount > 1)
            return;
        var file = e.File;
        _logger.LogInformation($"File picked: {file.Name} Size: {file.Size}");


        try
        {
            _latestFileError = "";
            var fileBuffer = new byte[file.Size];
            //var fileStream = e.File.OpenReadStream(file.Size);
            await file.OpenReadStream().ReadAsync(fileBuffer);
            var fileSize = fileBuffer.Length;

            // Load file into memory, assume starting at address specified in two first bytes of .prg file
            BinaryLoader.Load(
                Parent.WasmHost.SystemRunner.System.Mem,
                fileBuffer,
                out ushort loadedAtAddress,
                out ushort fileLength);

            _logger.LogInformation($"File loaded at {loadedAtAddress.ToHex()}, length {fileLength.ToHex()}");

            _logger.LogInformation($"Starting loaded program by changing Program Counter to {loadedAtAddress.ToHex()}");
            Parent.WasmHost.SystemRunner.System.CPU.PC = loadedAtAddress;

            await Parent.OnStart(new());

        }
        catch (Exception ex)
        {
            _latestFileError = $"Load error: {ex.Message}";
            _logger.LogError($"Load error: {ex.Message}");
        }
    }

    /// <summary>
    /// Open Load Basic .prg file dialog
    /// </summary>
    /// <returns></returns>
    private async Task OnBasicFilePicker(MouseEventArgs mouseEventArgs)
    {
        _wasRunningBeforeFileDialog = Parent.CurrentEmulatorState == EmulatorState.Running;
        await Js.InvokeVoidAsync("clickId", "filePickerBasic");
    }

    /// <summary>
    /// Callback when C64 basic file (.prg) has been loaded from file pick dialog (from main UI, not monitor)
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnBasicFilePickerChange(InputFileChangeEventArgs e)
    {
        if (Parent.WasmHost == null)
            return;

        if (Parent.CurrentEmulatorState == EmulatorState.Uninitialized)
            return;

        // Only expect one file
        if (e.FileCount > 1)
            return;
        var file = e.File;
        _logger.LogInformation($"File picked: {file.Name} Size: {file.Size}");

        try
        {
            _latestFileError = "";
            var fileBuffer = new byte[file.Size];
            //var fileStream = e.File.OpenReadStream(file.Size);
            await file.OpenReadStream().ReadAsync(fileBuffer);
            var fileSize = fileBuffer.Length;

            // Load file into memory, assume starting at address specified in two first bytes of .prg file
            BinaryLoader.Load(
                Parent.WasmHost.SystemRunner.System.Mem,
                fileBuffer,
                out ushort loadedAtAddress,
                out ushort fileLength);

            if (loadedAtAddress != C64.BASIC_LOAD_ADDRESS)
            {
                // Probably not a Basic program that was loaded. Don't init BASIC memory variables.
                _logger.LogWarning($"Warning: Loaded program is not a Basic program, it's expected to load at {C64.BASIC_LOAD_ADDRESS.ToHex()} but was loaded at {loadedAtAddress.ToHex()}");
            }
            else
            {
                // Init C64 BASIC memory variables
                ((C64)Parent.WasmHost.SystemRunner.System).InitBasicMemoryVariables(loadedAtAddress, fileLength);
            }

            _logger.LogInformation($"Basic program loaded at {loadedAtAddress.ToHex()}, length {fileLength.ToHex()}");
        }
        catch (Exception ex)
        {
            _latestFileError = $"Load error: {ex.Message}";
            _logger.LogError($"Load error: {ex.Message}");
        }

        if (_wasRunningBeforeFileDialog)
            await Parent.OnStart(new());
    }

    private async Task OnSaveBasicFile(MouseEventArgs mouseEventArgs)
    {
        if (Parent.WasmHost == null)
            return;
        if (Parent.CurrentEmulatorState == EmulatorState.Uninitialized)
            return;

        var result = await Parent.Modal.Show<EnterFileName>().Result;
        if (result.Confirmed)
        {
            if (result.Data is null)
                return;
            var fileName = (string)result.Data;
            if (string.IsNullOrEmpty(fileName))
                return;
            string ext = Path.GetExtension(fileName);
            if (string.IsNullOrEmpty(ext))
                fileName += ".prg";

            try
            {
                _latestFileError = "";
                var startAddress = C64.BASIC_LOAD_ADDRESS;
                var endAddress = ((C64)Parent.WasmHost.SystemRunner.System).GetBasicProgramEndAddress();
                var saveData = BinarySaver.BuildSaveData(Parent.WasmHost.SystemRunner.System.Mem, startAddress, endAddress, addFileHeaderWithLoadAddress: true);
                var fileStream = new MemoryStream(saveData);
                using var streamRef = new DotNetStreamReference(stream: fileStream);
                // Invoke JS helper script to trigger save dialog to users browser downloads folder
                await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
            catch (Exception ex)
            {
                _latestFileError = $"Save error: {ex.Message}";
                _logger.LogError($"Save error: {ex.Message}");   
            }
        }
    }


    private async Task OnAssemblyExampleChanged(ChangeEventArgs e)
    {
        SelectedAssemblyExample = e.Value?.ToString() ?? "";
    }

    private async Task OnLoadAssemblyExample(MouseEventArgs mouseEventArgs)
    {
        var url = SelectedAssemblyExample;
        if (string.IsNullOrEmpty(url))
            return;

        await Parent.OnPause(new());

        try
        {
            _latestFileError = "";
            var prgBytes = await HttpClient!.GetByteArrayAsync(url);
            // Load file into memory, assume starting at address specified in two first bytes of .prg file
            BinaryLoader.Load(
                Parent.WasmHost.SystemRunner.System.Mem,
                prgBytes,
                out ushort loadedAtAddress,
                out ushort fileLength);

            _logger.LogInformation($"File loaded at {loadedAtAddress.ToHex()}, length {fileLength.ToHex()}");

            _logger.LogInformation($"Starting loaded program by changing Program Counter to {loadedAtAddress.ToHex()}");
            Parent.WasmHost.SystemRunner.System.CPU.PC = loadedAtAddress;
        }
        catch (Exception ex)
        {
            _latestFileError = $"Load error: {ex.Message}";
            _logger.LogError($"Load error: {ex.Message}");
        }

        await Parent.OnStart(new());
    }

    private async Task OnBasicExampleChanged(ChangeEventArgs e)
    {
        SelectedBasicExample = e.Value?.ToString() ?? "";
    }

    private async Task OnLoadBasicExample(MouseEventArgs mouseEventArgs)
    {
        string url = SelectedBasicExample;
        if (string.IsNullOrEmpty(url))
            return;

        await Parent.OnPause(new());

        try
        {
            _latestFileError = "";
            var prgBytes = await HttpClient!.GetByteArrayAsync(url);

            // Load file into memory, assume starting at address specified in two first bytes of .prg file
            BinaryLoader.Load(
                Parent.WasmHost.SystemRunner.System.Mem,
                prgBytes,
                out ushort loadedAtAddress,
                out ushort fileLength);

            var c64 = (C64)Parent.WasmHost.SystemRunner.System;
            if (loadedAtAddress != C64.BASIC_LOAD_ADDRESS)
            {
                // Probably not a Basic program that was loaded. Don't init BASIC memory variables.
                System.Diagnostics.Debug.WriteLine($"Warning: Loaded program is not a Basic program, it's expected to load at {C64.BASIC_LOAD_ADDRESS.ToHex()} but was loaded at {loadedAtAddress.ToHex()}");
            }
            else
            {
                // Init C64 BASIC memory variables
                c64.InitBasicMemoryVariables(loadedAtAddress, fileLength);
            }

            // Send "list" + Enter to the keyboard buffer to immediately list the loaded program
            var c64Keyboard = c64.Cia.Keyboard;
            // Bypass keyboard matrix scanning and send directly to keyboard buffer?
            c64Keyboard.InsertPetsciiCharIntoBuffer(Petscii.CharToPetscii['l']);
            c64Keyboard.InsertPetsciiCharIntoBuffer(Petscii.CharToPetscii['i']);
            c64Keyboard.InsertPetsciiCharIntoBuffer(Petscii.CharToPetscii['s']);
            c64Keyboard.InsertPetsciiCharIntoBuffer(Petscii.CharToPetscii['t']);
            c64Keyboard.InsertPetsciiCharIntoBuffer(Petscii.CharToPetscii[(char)13]);

        }
        catch (Exception ex)
        {
            _latestFileError = $"Load error: {ex.Message}";
            _logger.LogError($"Load error: {ex.Message}");
        }

        await Parent.OnStart(new());
    }
}