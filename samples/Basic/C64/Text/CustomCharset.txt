10 rem * example 1 *
20 rem creating programmable characters

31 poke 56334,peek(56334)and254: rem clearing bit 0 at $DC0E turns off TimerA/kb 
32 poke 1,peek(1)and251: rem clearing bit 2 at $0001 turns off i/o and shows Chargen at $D000 instead

35 for i=0to63: rem character range to be copied
36 for j=0to7: rem copy all 8 bytes per character
37 poke 12288+i*8+j,peek(53248+i*8+j): rem copy a byte
38 next j:
39 next i: rem goto next byte or character

40 poke 1,peek(1)or4:poke 56334,peek(56334)or1: rem turn on i/o and kb
41 poke 53272,(peek(53272)and240)+12: rem set bit 1-3 in 53272 ($D018) to bits 110 (3) which changes VIC 2 charset pointer to mem 12288 ($3000)

60 for char=60to63: rem program characters 60 thru 63
80 for byte=0to7: rem do all 8 bytes of a character
100 read number: rem read in 1/8th of character data
120 poke 12288+(8*char)+byte,number: rem store the data in memory
140 next byte
141 next char: rem also could be next byte, char

rem 142 poke 1,peek(1)or4:poke 56334,peek(56334)or1: rem turn on i/o and kb
rem 143 poke 53272,(peek(53272)and240)+12: rem set bit 1-3 in 53272 ($D018) to bits 110 (3) which changes VIC 2 charset pointer to mem 12288 ($3000)

150 print chr$(147)tab(255)chr$(60);
155 print chr$(61)tab(55)chr$(62)chr$(63)
160 rem line 150 puts the newly defined characters on the screen

170 get a$: rem wait for user to press a key
180 if a$=""then goto170: rem if no keys were pressed, try again!

190 poke 53272,21: rem return to normal characters

200 data 4,6,7,5,7,7,3,3: rem data for character 60
210 data 32,96,224,160,224,224,192,192: rem data for character 61
220 data 7,7,7,31,31,95,143,127: rem data for character 62
230 data 224,224,224,248,248,248,240,224: rem data for character 63
240 end
